{{- /*gotype: github.com/LemonNekoGH/easinteraction-for-cadence/cmd/easi-gen/internal/types.CompositeType*/ -}}
package {{.PkgName}}

import (
	"fmt"
	"context"
	flowGrpc "github.com/onflow/flow-go-sdk/access/grpc"
	flowSdk "github.com/onflow/flow-go-sdk"
	flowCrypto "github.com/onflow/flow-go-sdk/crypto"
	"github.com/onflow/cadence"
	"github.com/lemonnekogh/godence"
)

{{define "CompositeType"}}
type {{.GetGoName}} struct {
	{{if eq .Kind 3}}
	address string
	flowCli *flowGrpc.Client
	{{else}}
	{{range .GetFields}}
	{{.GoName}} {{.GoType}} `godence:"{{.Name}}"`
	{{end}}
	{{end}}
}

{{- /* Only for contracts */ -}}
{{if eq .Kind 3}}
// New{{.GetGoName}} construct a new {{.GetGoName}} instance.
func New{{.GetGoName}}(address string, flowCli *flowGrpc.Client) (*{{.GetGoName}}, error) {
	// prepare script
	script := fmt.Sprintf(`import {{.GetName}} from %s
pub fun main(){{ if ne .Kind 3 }}: String{
	// check if type exists
	return Type<{{if eq .Kind 2}}@{{end}}{{.GetName}}>().identifier
}{{else}}{}{{end}}
`, address)
	// send a script to ensure contract address is correct
	_, err := flowCli.ExecuteScriptAtLatestBlock(context.Background(), []byte(script), nil)
	if err != nil {
		return nil, err
	}
	return &{{.GetGoName}}{
		address: address,
		flowCli: flowCli,
	}, nil
}
{{end}}

{{$typeName := .GetGoName}}
{{$fns := .GetFunctions}}
{{range $fn := $fns}}
{{$commaCountAll:=.CommaCountAll}}{{$commaCountAuth:=.CommaCountAuth}}{{$commaCountCommon:=.CommaCountCommon}}
{{$needSendTx := $fn.WillChangeState}}
// {{$fn.GoName}} will {{if $needSendTx}}change Flow blockchain's state.{{else}}query from Flow blockchain.{{end}}
// Signature: pub fun {{$fn.Name}}({{range $i, $p := $fn.Params}}{{$p.Label}} {{$p.Name}}: {{$p.Type}}{{if lt $i $commaCountAll}},{{end}}{{end}}){{if ne $fn.ReturnGoType ""}}: {{$fn.ReturnType}}{{end}}
func (c *{{$typeName}}) {{$fn.GoName}}(
	{{range $i, $p := $fn.Params}}{{if ne $p.Type "AuthAccount"}}arg{{$i}} {{$p.GoType}},{{end}}{{end}}
	{{if $needSendTx}}{{range $i, $p := $fn.Params}}{{if eq $p.Type "AuthAccount"}}authorizer{{$i}},{{end}}{{end}} payer, proposer flowSdk.Address,
	{{range $i, $p := $fn.Params}}{{if eq $p.Type "AuthAccount"}}authorizer{{$i}}KeyIndex,{{end}}{{end}} payerKeyIndex, proposalKeyIndex int,
	{{range $i, $p := $fn.Params}}{{if eq $p.Type "AuthAccount"}}authorizer{{$i}}Signer,{{end}}{{end}} payerSigner flowCrypto.Signer,{{end}}
) ({{if $needSendTx}}*flowSdk.Identifier, error) {
	// get reference id
	block, err := c.flowCli.GetLatestBlock(context.Background(), true)
	if err != nil {
		return nil, err
	}
	// get proposer sequence number
	propAcct, err := c.flowCli.GetAccount(context.Background(), proposer)
	if err != nil {
		return nil, err
	}
	// gen script
	script := fmt.Sprintf(`{{$fn.GenCadenceScript}}`, c.address)
	// construct tx
	tx := flowSdk.NewTransaction().
		SetScript([]byte(script)).
		{{range $i, $p := $fn.Params}}
		{{if eq $p.Type "AuthAccount"}}AddAuthorizer(authorizer{{$i}}).{{end}}{{end}}
		SetPayer(payer).
		SetProposalKey(proposer, proposalKeyIndex, propAcct.Keys[proposalKeyIndex].SequenceNumber).
		SetReferenceBlockID(block.ID).
		SetGasLimit(9999)
	{{range $i, $p := $fn.Params}}{{if ne $p.Type "AuthAccount"}}// add argument
	argCdc{{$i}}, err := godence.ToCadence(
	{{- /* Special type mapping */ -}}
	{{if eq $p.Type "Address"}}
		godence.Address(arg{{$i}}),
	{{else}}
		arg{{$i}},
	{{end}}
	)
	if err != nil {
		return nil, err
	}
	err = tx.AddArgument(argCdc{{$i}})
	if err != nil {
		return nil, err
	}
	{{end}}{{end}}
	{{range $i, $p := $fn.Params}}{{if eq $p.Type "AuthAccount"}}
	if authorizer{{$i}}.String() != payer.String() {
		// sign payload
		err = tx.SignPayload(authorizer{{$i}}, authorizer{{$i}}KeyIndex, authorizer{{$i}}Signer)
		if err != nil {
			return nil, err
		}
	}
	{{end}}{{end}}
	// sign envelop
	err = tx.SignEnvelope(payer, payerKeyIndex, payerSigner)
	if err != nil {
		return nil, err
	}
	// send
	err = c.flowCli.SendTransaction(context.Background(), *tx)
	if err != nil {
		return nil, err
	}
	id := tx.ID()
	return &id, nil{{else}}{{if ne $fn.ReturnGoType ""}}{{$fn.ReturnGoType}},{{end}} error) {
	{{if ne $fn.IsReturnMap true}}var ret {{$fn.ReturnGoType}}{{else}}ret := {{$fn.ReturnGoType}}{}{{end}}
	// gen script
	script := fmt.Sprintf(`{{$fn.GenCadenceScript}}`, c.address)
	// prepare args
	args := []cadence.Value{}
	{{range $i, $p := $fn.Params}}argCdc{{$i}}, err := godence.ToCadence(
		{{- /* Special type mapping */ -}}
		{{if eq $p.Type "Address"}}
			godence.Address(arg{{$i}}),
		{{else}}
			arg{{$i}},
		{{end}}
	)
	if err != nil {
		return ret, err
	}
	args = append(args, argCdc{{$i}})
	{{end}}
	// send query
	result, err := c.flowCli.ExecuteScriptAtLatestBlock(context.Background(), []byte(script), args)
	if err != nil {
		return ret, err
	}
	{{if ne $fn.ReturnGoType ""}}
	// covert result
	err = godence.ToGo(result, {{if ne $fn.IsReturnMap true}}&{{end}}ret)
	if err != nil {
		return ret, err
	}
	return ret, nil
	{{else}}
	return nil
	{{end}}
{{end}}
}
{{end}}
{{end}}

{{- /* Contract */ -}}
{{template "CompositeType" .}}

{{- /* Sub types */ -}}
{{range .GetSubTypes}}
{{template "CompositeType" .}}
{{end}}
