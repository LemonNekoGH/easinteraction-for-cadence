package {{.PkgName}}

import (
	"fmt"
	"context"
	flowGrpc "github.com/onflow/flow-go-sdk/access/grpc"
	flowSdk "github.com/onflow/flow-go-sdk"
	flowCrypto "github.com/onflow/flow-go-sdk/crypto"
	"github.com/onflow/cadence"
	"strings"
)

type Contract{{.ContractName}} struct {
	address string
	flowCli flowGrpc.Client
}

// New{{.ContractName}}Contract construct a new Contract{{.ContractName}} instance.
func New{{.ContractName}}Contract(address string, flowCli flowGrpc.Client) (*Contract{{.ContractName}}, error) {
	// prepare script
	script := fmt.Sprintf(`import {{.ContractName}} from %s
pub fun main(){}
`, address)
	// send a script to ensure contract address is correct
	_, err := flowCli.ExecuteScriptAtLatestBlock(context.Background(), []byte(script), nil)
	if err != nil {
		return nil, err
	}
	return &Contract{{.ContractName}}{
		address: address,
		flowCli: flowCli,
	}, nil
}
